function [v] = remove_drift(data, drift_start_time,drift_end_time)% subtracts center-of-mass motion from tracking data% original remove_drift.m (jcribb) was saved as remove_drift_DBH.m  01/14/08% This file does not have linear drift option% Modified for insertion before msd calculation with msd2% g. holzwarth 01/18/08%BACKUPS:%_2011_10_27 before radius column is added% _2011_10_19 before com vs. t plot added% input variables%   data columns: TIME IMAGE ID FRAME X Y R ROLL PITCH YAW;%   drift_start_time =%   drift_end_time   =% output [v,q]:%   v = data minus drift%   q = drift vectorfprintf('entered remove_drift\n');% global variables    global TIME ID FRAME X Y R ROLL PITCH YAW;         video_tracking_constants;  % handle the argument list    if ~exist('data');        error('No data found.');     end;     if nargin < 3 || isempty(drift_end_time);         drift_end_time = max(data(:,TIME));         logentry('No end_time specified.  Choosing last time in dataset.');    end;    if nargin < 2 || isempty(drift_start_time);         drift_start_time = min(data(:,TIME));         logentry('No start_time specified.  Choosing first time in dataset.');    end;      if nargin < 1 || isempty(data);         error('No data found. Operator incompetence.');     end;                [v,~] = center_of_mass(data, drift_start_time, drift_end_time);                    return  % end of function remove_drift()% ****************************************************************    % *****               function center_of_mass               ******    % ****************************************************************function [v,q] = center_of_mass(data, drift_start_time, drift_end_time)% at timepoint, average the x, y, and z values over Nbeads% to determine the com(:,X), com(:,Y), and com(:,Z).% The first index in com(,)corresponds to frame number.% The sudden appearance or disappearance of trackers within% a data set causes jumps in com(:,:) global TIME IMAGE ID FRAME X Y R ROLL PITCH YAW;   fprintf('entered center-of-mass function\n');order = 30; % order of polynomial run through the com data to smooth it.% clip data to desired time points    t_idx = find( data(:,TIME) >= drift_start_time & data(:,TIME) <= drift_end_time);    data = data(t_idx,:);% compute center of mass com(:,x),com(:,y),com(:,z) at each frame by looking at existing tracker locations.      minframe = min(data(:, FRAME));    maxframe = max(data(:, FRAME));        frame_vector = minframe : maxframe;    % subtract t(1) from data(:,TIME)        t = data(:,TIME);        t0 = t(1);                  t = t - t0;                          % compute com(:,X), com(:,Y), com(:,Z)    for k = 1 : length(frame_vector) % k is frame number        tic;        thisframe_idx = find(data(:, FRAME) == frame_vector(k));        if length(thisframe_idx) > 1            com(k,:) = [mean(data(thisframe_idx, X)) mean(data(thisframe_idx, Y))];% mean(data(thisframe_idx,Z))];          end        timevec(k,1) = t(thisframe_idx(1));    end       figure(6)     plot(frame_vector,com(:,1),'r',frame_vector,com(:,2),'b');            title('Fig. 6 Center of Mass vs. Frame #');            pause(1);      % Subtract com(:,X)from data(:,X) etc.   for Nparticle = 0 : get_particlemax(data); % Nparticle is particle_numberthisparticle_idx = find(data(:,ID) == Nparticle);              data_NoDrift(thisparticle_idx,X) = data(thisparticle_idx,X) - com(:,1);    data_NoDrift(thisparticle_idx,Y) = data(thisparticle_idx,Y) - com(:,2);%     data_NoDrift(thisbead_idx,Z) = data(thisbead_idx,Z) - com(:,3);%     %remnant from when this program used Z position data               % plot data and data_NoDrift     figure(7)    subplot(1,2,1);        plot(data(thisparticle_idx,X),data(thisparticle_idx,Y),'-r');            title(['Fig. 7 Original Track ',num2str(Nparticle)]);    subplot(1,2,2);        plot(data_NoDrift(thisparticle_idx,X),data_NoDrift(thisparticle_idx,Y),'-r');            title(['Fig. 7 Track - No Drift ',num2str(Nparticle)]);        pause(1);end         % end of for loop over Nparticle%         close(10);    %close(timefig);    % Construct corrected output matrix [v,q]    v = data;  % columns:TIME ID FRAME X Y Z ROLL PITCH YAW;    v(:,X)= data_NoDrift(:,X);     v(:,Y)= data_NoDrift(:,Y);%     v(:,Z)= data_NoDrift(:,Z);        q = com;   % com(k,w) where k=frame                            % and w=x, y, or z                                    return;  % end of function [v,q] = center_of_mass.% ****************************************************************    % *****               function logentry                     ******    % ****************************************************************function logentry(txt)    logtime = clock;    logtimetext = [ '(' num2str(logtime(1),  '%04i') '.' ...           num2str(logtime(2),        '%02i') '.' ...           num2str(logtime(3),        '%02i') ', ' ...           num2str(logtime(4),        '%02i') ':' ...           num2str(logtime(5),        '%02i') ':' ...           num2str(round(logtime(6)), '%02i') ') '];     headertext = [logtimetext 'remove_drift: '];     fprintf('%s%s\n', headertext, txt);     return;               